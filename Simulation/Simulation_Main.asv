%% Test the implementation of DiscreteEventSimulation.m

%% clean the workspace
clear all; %Removes all variables, functions, and MEX-files from memory, leaving the workspace empty
close all; % delete all figures whose handles are not hidden.
clc; % clear command window

%% Program
% Set the scenario
scenario = NewDay();

runs = 500;
for r=1:runs                
    % Run the simulation
    [customers, tables, times, queues, ...
        num_busyseats, num_busytables] = DiscreteEventSimulation(scenario);

    %% Compute indicators
    % Abandonment/Arrival ratio
    num_admitted = sum([customers.time_seated] ~= inf);
    num_abandon = sum([customers.time_seated] == inf);
    odds_abandon = num_abandon / num_admitted;

    % Profit
    revenue = sum([customers.revenue]);
    cost = 0.10 * times(end) * 60 * ([1 2 3 4 5]*scenario.arrangement); % cost = 0.10 * closing time in minutes * total number of seats
    profit = revenue - cost;

    % Waiting times (vector)
    waiting_times = [customers.time_seated] - [customers.time_arrival];

    % Utilization measures (vectors)
    total_seats = [1,2,3,4,5]*scenario.arrangement;
    total_tables = ones(1,5)*scenario.arrangement;
    util_seats = num_busyseats / total_seats;
    util_tables = num_busytables / total_tables;
    
    %% Collect statistics
    if r == 1
        num_admitted_avg = num_admitted;
        num_admitted_var = 0;
        num_abandon_avg = num_abandon;
        num_abandon_var = 0;
        odds_abandon_avg = odds_abandon;
        odds_abandon_var = 0;
        max_waiting_times_avg = waiting_times;
        maxwaiting_times_var = 0;
        util_seats_avg = util_seats;
        util_seats_var = 0;
        util_tables_avg = util_tables;
        util_tables_var = 0;
        profit_avg = profit;
        profit_var = 0;
    else
        [num_admitted_avg, num_admitted_var] = UpdatedStatistics(num_admitted_avg, num_admitted_var, num_admitted, r);
        [num_abandon_avg, num_abandon_var] = UpdatedStatistics(num_abandon_avg, num_abandon_var, num_abandon, r);
        [odds_abandon_avg, odds_abandon_var] = UpdatedStatistics(odds_abandon_avg, odds_abandon_var, odds_abandon, r);
        [waiting_times_avg, waiting_times_var] = UpdatedStatistics(waiting_times_avg, waiting_times_var, waiting_times, r);
        [util_seats_avg, util_seats_var] = UpdatedStatistics(util_seats_avg, util_seats_var, util_seats, r);
        [util_tables_avg, util_tables_var] = UpdatedStatistics(util_tables_avg, util_tables_var, util_tables, r);
        [profit_avg, profit_var] = UpdatedStatistics(profit_avg, profit_var, profit, r);
    end
    
    profit_all(r) = profit;
    profit_avg_all(r) = profit_avg;
    profit_var_all(r) = profit_var;
    
    num_admitted_all(r) = num_admitted;
    num_admitted_avg_all(r) = num_admitted_avg;
    num_admitted_var_all(r) = num_admitted_var;
    
    num_abandon_all(r) = num_abandon;
    num_abandon_avg_all(r) = num_abandon_avg;
    num_abandon_var_all(r) = num_abandon_var;
    
    odds_abandon_all(r) = odds_abandon;
    odds_abandon_avg_all(r) = odds_abandon_avg;
    odds_abandon_var_all(r) = odds_abandon_var;
    
    waiting_times_all(r) = waiting_times;
    waiting_times_avg_all(r) = waiting_times_avg;
    waiting_times_var_all(r) = waiting_times_var;
    
    util_seats_all(r) = util_seats;
    util_seats_avg_all(r) = util_seats_avg;
    util_seats_var_all(r) = util_seats_var;
    
    util_tables_all(r) = util_tables;
    util_tables_avg_all(r) = util_tables_avg;
    util_tables_var_all(r) = util_tables_var;

end

%% Bootstrapping MSE
clc;
data_vector = profit_all;
Mean = mean(profit_all);

draws = 100;                     % Default (do not change)
sqrt_BootstrapMSE_Mean = sqrt(BootstrapMSE(data_vector, @mean, Mean, draws));

% Outputs
sqrt_MSE_mean = std(data_vector)/sqrt(runs);
display(Mean);                   % Empirical mean
display(sqrt_MSE_mean);          % Empirical MSE
display(sqrt_BootstrapMSE_Mean); % Should be cloes to MSE_mean

%% Visualization
%% Profit visualization
% Running average profit (line plot) + variance of profit + empirical MSE
% Histogram of profits (worst case, 5th, mean, 95th)

%% Queue abandonment visualization


% Graphical animation of the results
% DrawNetwork(scenario, times, queues);

% Chart of the results
% figure;DrawQueues(times, queues);
